<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-22T09:01:27.382Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mudai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript---语句</title>
    <link href="http://yoursite.com/2019/04/22/JavaScript-%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/04/22/JavaScript-语句/</id>
    <published>2019-04-22T09:00:05.000Z</published>
    <updated>2019-04-22T09:01:27.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><ul><li>第一种用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( i &gt; <span class="number">25</span> ) &#123;</span><br><span class="line">    alert(<span class="string">"Greater than 25."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Less than or equal to 25."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>) &#123;</span><br><span class="line">    alert(<span class="string">"Greater than 25."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    alert(<span class="string">"Less than 0."</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Between 0 and 25, inclusive."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h4><blockquote><p>后测试语句，循环体的语句至少被执行一次</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">2</span>);     <span class="comment">//此时代码块只能被执行一次，也是至少执行的一次，碰到判断条件停止循环</span></span><br></pre></td></tr></table></figure><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><blockquote><p>先判断再执行，代码块的语句有可能永远不能执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;                    <span class="comment">//先判断是否符合条件，再执行</span></span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><blockquote><p>前测试循环语句</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialzation; expression; post-loop-expression) </span><br><span class="line">&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    j += <span class="number">1</span>;</span><br><span class="line">&#125;                   <span class="comment">//初始化i等于0，判断i小于n,执行代码快里的语句，再执行i++语句，后面依次循环</span></span><br></pre></td></tr></table></figure><h4 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for-in语句"></a>for-in语句</h4><blockquote><p>一种精准的迭代语句，可以用来枚举对象的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( property <span class="keyword">in</span> expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> Window) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break、continue、label语句"><a href="#break、continue、label语句" class="headerlink" title="break、continue、label语句"></a>break、continue、label语句</h4><blockquote><p>label 语句可以和break，continue在多重循环中搭配使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label: statement;      <span class="comment">//label语句的格式</span></span><br></pre></td></tr></table></figure><blockquote><p>break语句用来完全跳出循环，continue语句用来跳出大循环中的一次循环并开始下一次循环</p></blockquote><p>示例：break</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) <span class="keyword">break</span>;   <span class="comment">//number=55时，退出内层循环，所以少循环了5次</span></span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;           <span class="comment">//number最后的值为95</span></span><br></pre></td></tr></table></figure><p>示例: continue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j =<span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) <span class="keyword">continue</span>; <span class="comment">//number = 55时，跳过一次内层循环，最后少循环了一次</span></span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//number最后的值为99</span></span><br></pre></td></tr></table></figure><p>示例：break label   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">start:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> start;</span><br><span class="line">        &#125;  </span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环跳到start标签处，所以number最后的值为55</p></blockquote><p>示例：continue label</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">start:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> start;</span><br><span class="line">        &#125;  </span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        <span class="comment">//number = 95</span></span><br></pre></td></tr></table></figure><blockquote><p>循环跳到<code>label</code>标签处，即就是当满足<code>continue</code>条件时，start标签处的外层循环跳过一次，直接从<code>i= 5，j= 5</code>处进入<code>i = 6，j= 0</code>处，所以<code>number</code>的值最后为<code>95</code></p></blockquote><h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><blockquote><p>with语句的作用是将代码的作用域设置到一个特定的对象中去</p><p>with语句可以简化代码，但是同时也会造成性能下降，严格模式下禁用</p></blockquote><p>示例：未使用with语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">var</span> url = location.href;</span><br></pre></td></tr></table></figure><p>示例：使用with语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line">    <span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> hostName = hostname;</span><br><span class="line">    <span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><blockquote><p>一个表达式，而需要对表达式的多个值进行不同的处理方式时使用</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value3: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: alert(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: alert(<span class="string">"4"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以混合case情形，注意要删去break</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">//合并两种情形</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        alert(<span class="string">"4"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在 <code>switch</code> 语句中使用任何数据类型（在很多其他语言中只能使用数值），无论是字符串，还是对象都没有 问题。其次，每个 <code>case</code>的值不一定是常量，可以是变量，甚至是表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="string">"hello world"</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"hello"</span> +<span class="string">"world"</span>:</span><br><span class="line">        alert(<span class="string">"Greeting was found."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"goodbye"</span>:</span><br><span class="line">        alert(<span class="string">"Closing was found."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch表达式在与case匹配时，采用全等操作符，故不会发生类型转换，’10’不等于10</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;语句&quot;&gt;&lt;a href=&quot;#语句&quot; class=&quot;headerlink&quot; title=&quot;语句&quot;&gt;&lt;/a&gt;语句&lt;/h1&gt;&lt;h4 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerlink&quot; title=&quot;if语句&quot;&gt;&lt;/a&gt;if语句&lt;/h
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>操作符</title>
    <link href="http://yoursite.com/2019/04/20/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/04/20/操作符/</id>
    <published>2019-04-20T09:23:21.000Z</published>
    <updated>2019-04-20T11:09:17.300Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><ul><li>相等和不相等</li><li>全等和不全等</li></ul><blockquote><p>由于相等和不相等比较是存在类型转换问题，所以为了保证编程时代码中数据类型的完整性，尽量使用使用全等和不全等        </p></blockquote><h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><ul><li>variable  =  Boolean.expression ? true_value  :  false_value;</li></ul><h4 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center">加/赋值</td><td style="text-align:center">+=</td></tr><tr><td style="text-align:center">减/赋值</td><td style="text-align:center">-=</td></tr><tr><td style="text-align:center">乘/赋值</td><td style="text-align:center">*=</td></tr><tr><td style="text-align:center">除/赋值</td><td style="text-align:center">/=</td></tr><tr><td style="text-align:center">模/赋值</td><td style="text-align:center">%=</td></tr><tr><td style="text-align:center">左移/赋值</td><td style="text-align:center">&lt;&lt;=</td></tr><tr><td style="text-align:center">有符号右移/赋值</td><td style="text-align:center">&gt;&gt;=</td></tr><tr><td style="text-align:center">无符号右移/赋值</td><td style="text-align:center">&gt;&gt;&gt;=</td></tr></tbody></table><blockquote><p>设计这些操作符的目的是为了简化赋值操作，并不会带来任何性能上的提升</p></blockquote><h4 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h4><ul><li>声明多个变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>, num2 = <span class="number">2</span>, num3 = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>赋值操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>);   <span class="comment">//num的值为最后一个数，num == 0；</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h1&gt;&lt;h4 id=&quot;相等操作符&quot;&gt;&lt;a href=&quot;#相等操作符&quot; class=&quot;headerlink&quot; title=&quot;相等操作符&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS中String类型学习笔记</title>
    <link href="http://yoursite.com/2019/04/15/JS%E4%B8%ADString%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/15/JS中String类型学习笔记/</id>
    <published>2019-04-15T10:47:57.000Z</published>
    <updated>2019-04-15T14:25:00.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h1><p>1.’’ 或者 “” 都可以表示一个字符串<br>2.字符字面量，就是转义字符  </p><table><thead><tr><th>字面量</th><th>含义</th></tr></thead><tbody><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\b</td><td>空格</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>进制</td></tr><tr><td>\\</td><td>斜杠</td></tr><tr><td>\‘</td><td>单引号，如 ‘ It \‘s mine ‘</td></tr><tr><td>\“</td><td>双引号， 如 “ He said,\“hi\“ “</td></tr><tr><td>\xnn</td><td>以十六进制(n为0~f)表示的字符，如’\x41’表示 ‘A’</td></tr><tr><td>\unnnn</td><td>以十六进制(n为0~f)表示Unicode字符，如’\x03a3’表示希腊字母Σ</td></tr></tbody></table><p>3.字符串的长度，length属性       </p><p>4.字符串不可变，一旦创建，不可修改，字符串的拼接也是重新定义了新的字符串再删除原来的字符串。       </p><p>5.用toString()方法和String()转换成字符串。  </p><ul><li>在不知道转换变量是“null”还是“undefined“时，用String()。如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value1 = <span class="number">10</span>;      </span><br><span class="line"><span class="keyword">var</span> value2 = <span class="literal">true</span>;    </span><br><span class="line"><span class="keyword">var</span> value3 =  <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> value4</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(value1);    <span class="comment">//"10"</span></span><br><span class="line"><span class="built_in">String</span>(value2);    <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">String</span>(value3);    <span class="comment">//"null"</span></span><br><span class="line"><span class="built_in">String</span>(value4);    <span class="comment">//"undefined"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;String-类型&quot;&gt;&lt;a href=&quot;#String-类型&quot; class=&quot;headerlink&quot; title=&quot;String 类型&quot;&gt;&lt;/a&gt;String 类型&lt;/h1&gt;&lt;p&gt;1.’’ 或者 “” 都可以表示一个字符串&lt;br&gt;2.字符字面量，就是转义字符  &lt;
      
    
    </summary>
    
    
      <category term="Js, String" scheme="http://yoursite.com/tags/Js-String/"/>
    
  </entry>
  
  <entry>
    <title>用JavaScript实现动画效果</title>
    <link href="http://yoursite.com/2019/04/12/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2019/04/12/用JavaScript实现动画效果/</id>
    <published>2019-04-11T16:33:22.000Z</published>
    <updated>2019-04-15T14:15:36.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画的基础知识"><a href="#动画的基础知识" class="headerlink" title="动画的基础知识"></a>动画的基础知识</h2><p>动画是样式随时间变化的的一个很好的例子，简单来说，动画就是元素的位置随时间的变化而发生变化的一种函数。     </p><ol><li><p>位置<br>设置元素在网页里的位置的任务一般是属于表示层的，也就是CSS的任务，例子如下：    </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">element</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也可以用js来设置：   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">element.style.top = <span class="string">"100px"</span>;</span><br><span class="line">element.style.left = <span class="string">"30px"</span>;</span><br></pre></td></tr></table></figure></li></ol><p>这就表示了该元素将被摆放在距离网页顶部100px处，距离网页左端30px处，position属性有四个可选择的值。  </p><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>position</td><td>static</td><td>position属性的默认值，元素的位置想会按照元素出现的先后顺序依次出现</td></tr><tr><td>position</td><td>fixed</td><td></td></tr><tr><td>position</td><td>relative</td><td>表现形式和static相似，区别是position属性值为relative还可以从文档的正常显示顺序里脱离出来</td></tr><tr><td>position</td><td>absolute</td><td>如果我某个元素的position值设为absolute，那么我们就可以把它放在容纳它的<strong>容器</strong>中的任意位置</td></tr></tbody></table><p><strong>容器</strong>：这里的容器也是一个元素，只不过需要一定的条件   </p><ul><li>该元素的position属性是fixed或absolute</li><li>改元素的父元素的position属性是fixed或absolute</li></ul><p>把文档里的元素放在特定的地方不需要花太大的功夫，我们假定就这样一个元素：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>Woo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用js代码来设置这个元素的初始位置<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById(<span class="string">'message'</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span><br><span class="line">    elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">    elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">    elem.style.left = <span class="string">"30px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们想让这个元素的位置随时间的变化而变化     </p><ol start="2"><li>时间   </li></ol><p>接下来会用到的函数：   </p><ul><li><p>setTimeout( “<em>function</em>“, interval );    </p><ul><li>第一个参数通常是一个字符串，其内容是要执行的函数的名字。   </li><li>第二个参数是一个数值，它以毫秒为单位设定了需要经过多长时间才执行第一个参数传给它的函数。   </li><li>该函数还有一个返回值，当我们想要结束取消一个还在等待执行的函数，就可以把这个函数的返回值赋值给一个变量，然后调用cleanTimeout( )函数。</li></ul></li><li><p>cleanTimeout( );  </p><ul><li>取消待执行函数的排队。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> movement = setTimeout( <span class="string">"positionMessage"</span>, <span class="number">5000</span> );    <span class="comment">//让函数positionMessage()5000毫秒后执行</span></span><br><span class="line">cleanTimeout( movment ); <span class="comment">//取消执行</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>时间递增量   </li></ol><p>我们需要对我们函数进行升级，即使使用了setTimeout( )函数，这个元素的行为依然不像动画，只不过是过了一段时间后突然跳到另一个位置</p><p>首先设定一个目标位置值，在positionMessage( )函数中递增top和left的值，直到达到目标值    </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageMove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line"><span class="keyword">var</span> ypos = parInt(elem.style.top);</span><br><span class="line"><span class="keyword">var</span> xpos = parInt(elem.style.left);</span><br><span class="line"><span class="keyword">if</span> (xpos == <span class="number">200</span> &amp;&amp; ypos == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (xpos &lt; <span class="number">200</span>) xpos++;</span><br><span class="line"><span class="keyword">if</span> (ypos &lt; <span class="number">200</span>) ypos++;</span><br><span class="line"><span class="keyword">if</span> (xpos &gt; <span class="number">200</span>) xpos--;</span><br><span class="line"><span class="keyword">if</span> (ypos &gt; <span class="number">200</span>) ypos--;</span><br><span class="line">elem.style.top = ypos + <span class="string">'px'</span>;</span><br><span class="line">elem.style.left = xpos + <span class="string">'px'</span>;</span><br><span class="line">movement = setTimeout(<span class="string">"positionMessage"</span>,<span class="number">10</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;动画的基础知识&quot;&gt;&lt;a href=&quot;#动画的基础知识&quot; class=&quot;headerlink&quot; title=&quot;动画的基础知识&quot;&gt;&lt;/a&gt;动画的基础知识&lt;/h2&gt;&lt;p&gt;动画是样式随时间变化的的一个很好的例子，简单来说，动画就是元素的位置随时间的变化而发生变化的一种函数
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
