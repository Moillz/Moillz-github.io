<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-05T14:35:59.677Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mudai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise学习</title>
    <link href="http://yoursite.com/2020/07/04/Promise%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/07/04/Promise学习/</id>
    <published>2020-07-04T02:50:15.000Z</published>
    <updated>2020-07-05T14:35:59.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise的基础知识"><a href="#Promise的基础知识" class="headerlink" title="Promise的基础知识"></a>Promise的基础知识</h2><p>Promise相当于异步操作结果的占位符，异步操作返回一个Promise,比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = readFile(<span class="string">"example.txt"</span>);</span><br><span class="line"><span class="comment">//readFile承诺将在未来的某个时刻完成</span></span><br></pre></td></tr></table></figure><p>接下来就是对promise进行处理</p><h3 id="Promise的生命周期"><a href="#Promise的生命周期" class="headerlink" title="Promise的生命周期"></a>Promise的生命周期</h3><p>每个Promise都有一个生命周期，整个生命周期一共有两个状态：进行中（<code>pending</code>）和已处理（<code>settled</code>）。其中<code>settled</code>会有两种可选状态：成功（<code>fulfilled</code>）和失败（<code>rejected</code>）。</p><p>用上面的例子来举例，<code>readFile</code>函数返回一个Promise给promise变量，这是还未开始读取文件，Promise就处于<code>pending</code>状态。读取文件结束后Promise就会进入到<code>settled</code>状态中的其中一种状态。</p><ul><li><strong>Fulfilled</strong>      Promise异步操作成功完成</li><li><strong>Rejected</strong>     由于程序错误或一些其他原因，Promise异步操作未能成功完成</li></ul><p>Promise状态改变时通过调用<strong>then()</strong>方法和<strong>catch()</strong>方法来传递相应的处理函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//处理完成的数据</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//拒绝</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//未处理失败情况</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//未处理成功情况</span></span><br><span class="line">promise.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理失败情况</span></span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>then()方法和catch方法一起使用能更好的处理异步操作结果，这套体系能够清楚地指明操作结果是成功还是失败。</em></strong></p><h3 id="Promise构造函数"><a href="#Promise构造函数" class="headerlink" title="Promise构造函数"></a>Promise构造函数</h3><p>构造函数接受一个参数，这个参数叫做Promise的执行器，执行器是一个函数，这个函数传入两个参数，一个<strong>resolve()函数</strong>，一个<strong>reject()函数</strong>。</p><blockquote><p>示例代码来自书本《深入理解ES6》promise部分</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//触发异步操作</span></span><br><span class="line">        fs.readFile(filname, &#123;<span class="attr">encoding</span>: <span class="string">"utf8"</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//检查是否有错误</span></span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//成功读取文件</span></span><br><span class="line">            resolve(contents);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = readFile(<span class="string">"example.txt"</span>);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//完成</span></span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//拒绝</span></span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-resolve-和Promise-reject"><a href="#Promise-resolve-和Promise-reject" class="headerlink" title="Promise.resolve()和Promise.reject()"></a>Promise.resolve()和Promise.reject()</h3><p>这个函数接受一个参数：</p><ul><li>参数为一个确定的值，返回一个只能处理fulfilled状态或rejected状态的Promise；</li><li>参数为一个带有then方法的对象，返回一个含有这个then方法的Promise；</li><li>参数为一个Promise，不做处理，直接返回这个Promise；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">12</span>); <span class="comment">//只能处理完成状态</span></span><br><span class="line"></span><br><span class="line">promise1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">//12</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="串联Promise"><a href="#串联Promise" class="headerlink" title="串联Promise"></a>串联Promise</h2><p>一个Promise被处理了之后会接着返回另一个Promise，就行串联一样，可以一直处理下来，并且上一级的Promise还能返回值给接下来的Promise处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">12</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">//12</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> value - <span class="number">2</span>; <span class="comment">//传递给下一个Promise</span></span><br><span class="line">    </span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value2</span>)</span>&#123;  </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(value2); <span class="comment">//10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Boom!"</span>); <span class="comment">//抛出错误</span></span><br><span class="line">    </span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(err.message); <span class="comment">//"Boom!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>小贴士：务必在Promise链的末尾留一个拒绝处理函数以确保能够正确处理所有可能发生的错误。</em></strong></p><p>被返回的值也可以是一个Promise，这时接下来的函数就是处理这个Promise。</p><h2 id="响应多个Promise"><a href="#响应多个Promise" class="headerlink" title="响应多个Promise"></a>响应多个Promise</h2><p>使用Promise.all()和Promise.race()两个方法来监听多个Promise。</p><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p>方法接受一个参数，这个参数是个含有<strong>多个受监视Promise的可迭代对象</strong>（比如：数组，Set，Map，字符串）；返回一个Promise。</p><p>只有当参数中所有Promise都被解决，返回的Promise才会被解决。传入所有Promise的完成值数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">201</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">202</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="built_in">Promise</span>.all([p1,p2,p3]);</span><br><span class="line"></span><br><span class="line">p4.then(<span class="function"><span class="keyword">function</span>(<span class="params">valueArr</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(valueArr)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(valueArr[<span class="number">0</span>]); <span class="comment">//200</span></span><br><span class="line">  <span class="built_in">console</span>.log(valueArr[<span class="number">1</span>]); <span class="comment">//201</span></span><br><span class="line">  <span class="built_in">console</span>.log(valueArr[<span class="number">2</span>]); <span class="comment">//202</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当转入Promise中有一个被拒绝，则返回的Promise被拒绝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p5 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    reject(<span class="number">404</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p6 = <span class="built_in">Promise</span>.all([p1,p2,p3,p5]);</span><br><span class="line"></span><br><span class="line">p6.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(value)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//404</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p>这个方法与Promise.all()方法接受的参数相同，也返回一个Promise。但是这个方法是，只要传入Promise中有一个被解决，返回的Promise状态就为被解决。</p><p>实际上，传给Promise.race()方法的Promise会进行竞选，以决出哪个最先被解决，如果最先被解决的是已完成Promise，则返回已完成Promise；如果先解决的是已拒绝的Promise，则返回已拒绝Promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p7 = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br><span class="line"></span><br><span class="line">p7.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">例子中没有真正的异步，在真实异步操作过程中，这里的value值是最先解决的<span class="built_in">Promise</span>接收到的值；</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//200</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Promise的基础知识&quot;&gt;&lt;a href=&quot;#Promise的基础知识&quot; class=&quot;headerlink&quot; title=&quot;Promise的基础知识&quot;&gt;&lt;/a&gt;Promise的基础知识&lt;/h2&gt;&lt;p&gt;Promise相当于异步操作结果的占位符，异步操作返回一个P
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>npm的使用记录</title>
    <link href="http://yoursite.com/2020/07/04/npm%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2020/07/04/npm的使用记录/</id>
    <published>2020-07-04T02:49:49.000Z</published>
    <updated>2020-07-04T04:04:09.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NPM是什么"><a href="#NPM是什么" class="headerlink" title="NPM是什么"></a>NPM是什么</h2><p><code>npm</code>是Node.js标准的软件包管理器。使用npm可以将npm仓库里的软件包下载到自己的项目中使用，是前端开发的重要工具。使用npm的前提是安装Node.js.</p><p>首先我们要了解一个重要的文件：</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>该文件用来管理项目中的所有依赖，npm可以根据package.json中的配置来下载项目所需的所有依赖。是项目的清单。</p><p>举个例子,当我们打包项目文件想要发布的时候，并不需要将项目所有的依赖库一起打包，因为这些库都是npm仓库里有的，我们只需要有一个package.json文件，里面有项目依赖包的名称，版本信息等。当其他人下载我们的项目文件后，就可以通过package.json文件重新下载依赖。</p><h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>该文件有当前项目中安装的依赖包的具体信息。</p><h3 id="node-modules文件夹"><a href="#node-modules文件夹" class="headerlink" title="node_modules文件夹"></a>node_modules文件夹</h3><p>用npm下载的依赖包都会放在这个文件夹里，一般打包项目文件时，都会自动忽略这个文件夹，因为可以用package.json里面的信息重新下载。</p><h2 id="NPM用法"><a href="#NPM用法" class="headerlink" title="NPM用法"></a>NPM用法</h2><h3 id="安装所有依赖"><a href="#安装所有依赖" class="headerlink" title="安装所有依赖"></a>安装所有依赖</h3><p>如果项目中有package.json文件，则通过运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>它会在node_modules文件夹（如果不存在则会创建）中安装项目所需的所有东西。</p><h3 id="安装单个软件包"><a href="#安装单个软件包" class="headerlink" title="安装单个软件包"></a>安装单个软件包</h3><p>运行下列命令安装单个需要的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p>可选参数：</p><ul><li>–save 安装并添加条目到package.json文件的dependencies；</li><li>–save-dev 安装并添加条目到package.json文件的devDependencies；</li><li>-g 安装到全局环境中，而不是安装到当前文件夹，安装某个框架时经常使用。</li></ul><h3 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm update</span><br><span class="line">npm update &lt;package-name&gt;</span><br></pre></td></tr></table></figure><p>npm会根据package.json和package-lock.json两个文件对比计算出当前可更新版本，并执行更新。这两条命令不会更新主版本。举个例子，不会将vue2更新到vue3</p><p>可以通过下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure><p>来查看软件包的新版本。</p><p>若想要所有软件包更新到新的主版本，则需要全局地安装npm-check-updates软件包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g  npm-check-updates</span><br></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncu -u</span><br></pre></td></tr></table></figure><p>这会升级package.json文件和dependencies和devDependencies中地所有版本，以便npm可以安装到新的主版本。这时再运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>npm可以管理版本控制，有些时候一个库和其他库的不同版本兼容性不一样，为了是开发不造成混乱，npm遵循语义版本控制标准</p><h3 id="运行任务"><a href="#运行任务" class="headerlink" title="运行任务"></a>运行任务</h3><p>如果我们在项目中安装了可以独立运行的库，比如mocha</p><p>可以使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run &lt;task-name&gt;</span><br></pre></td></tr></table></figure><p>的形式运行单个任务，此时任务入口在package.json的scripts字段内；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NPM是什么&quot;&gt;&lt;a href=&quot;#NPM是什么&quot; class=&quot;headerlink&quot; title=&quot;NPM是什么&quot;&gt;&lt;/a&gt;NPM是什么&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm&lt;/code&gt;是Node.js标准的软件包管理器。使用npm可以将npm仓库里的软件包下载
      
    
    </summary>
    
      <category term="包管理" scheme="http://yoursite.com/categories/%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>Ajax中的XMLHttpRequest</title>
    <link href="http://yoursite.com/2020/06/27/Ajax%E4%B8%AD%E7%9A%84XMLHttpRequest/"/>
    <id>http://yoursite.com/2020/06/27/Ajax中的XMLHttpRequest/</id>
    <published>2020-06-27T02:35:48.000Z</published>
    <updated>2020-06-27T03:28:57.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h4><p>Ajax是<code>Asynchronous JavaScript and XML</code>的缩写，即为异步的JavaScript和XML，是不刷新页面的情况下，客户端和服务端也能进行异步通信的一种技术。比如强大的Google map 就是采用了这个技术。</p><p>在ES6之前，<code>js</code>中的Ajax的基本流程可以概括为：</p><ol><li>实例化一个<code>XMLHttpRequest</code>对象。</li><li>调用实例的open()方法，配置请求的<code>url</code>，必要的请求参数，请求方法。</li><li>调用实例的send()方法，向服务器发送请求。</li><li>处理响应,当请求状态<code>readyState</code>变化是会调用<code>onreadystatechange</code>方法，所以用实例的<code>onreadystatechange</code>属性指定处理响应的回调函数。</li></ol><blockquote><p>其中的<code>readyState</code>在整个请求的过程有五个状态：一旦<code>readyState</code>改变，就会调用<code>onreadychange</code>方法</p><p>0：未初始化的。尚未调用open方法。</p><p>1：启动。已经调用open方法，但还未调用send方法。</p><p>2：发送。已经调用send方法，尚未收到响应。</p><p>3：接收。已经收到部分响应。</p><p>4：完成。已经接收到全部响应，并且可以在客户端使用了。这一状态是我们最关注的。</p></blockquote><p>具体的代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//只关注状态4</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">"request was unsuccessful"</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'https://autumnfish.cn/artist/top/song?id=6452'</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>其中还有许多地方需要考虑浏览器的兼容性问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h4&gt;&lt;p&gt;Ajax是&lt;code&gt;Asynchronous JavaScript and XML&lt;/code&gt;的缩写，即为异步的Java
      
    
    </summary>
    
      <category term="Ajax" scheme="http://yoursite.com/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="http://yoursite.com/2020/06/15/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://yoursite.com/2020/06/15/数组去重/</id>
    <published>2020-06-15T06:01:47.000Z</published>
    <updated>2020-06-15T06:17:35.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一：利用es6中Set去重"><a href="#方法一：利用es6中Set去重" class="headerlink" title="方法一：利用es6中Set去重"></a>方法一：利用es6中Set去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> uni =  <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">    <span class="keyword">return</span> uni;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'true'</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>,<span class="string">'NaN'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'a'</span>, <span class="string">'a'</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(unique(arr));</span><br></pre></td></tr></table></figure><p>未考虑兼容性问题，并且无法去掉<code>{}</code>空对象</p><h2 id="方法二：-双重循环加splice去重"><a href="#方法二：-双重循环加splice去重" class="headerlink" title="方法二： 双重循环加splice去重"></a>方法二： 双重循环加splice去重</h2><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一：利用es6中Set去重&quot;&gt;&lt;a href=&quot;#方法一：利用es6中Set去重&quot; class=&quot;headerlink&quot; title=&quot;方法一：利用es6中Set去重&quot;&gt;&lt;/a&gt;方法一：利用es6中Set去重&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>理解js作用域</title>
    <link href="http://yoursite.com/2020/06/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3js%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/06/06/深入理解js作用域/</id>
    <published>2020-06-06T08:53:58.000Z</published>
    <updated>2020-06-15T05:38:16.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是作用域？"><a href="#什么是作用域？" class="headerlink" title="什么是作用域？"></a>什么是作用域？</h2><blockquote><p>作用域就是一套规则，用于确定在何处及如何查找变量（标识符）。</p></blockquote><blockquote><p>在<code>js</code>中，函数可以创建作用域；用<code>let</code>，<code>const</code>关键字配合<code>{}</code>可以创建块作用域</p></blockquote><h3 id="用函数创建作用域"><a href="#用函数创建作用域" class="headerlink" title="用函数创建作用域"></a>用函数创建作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a = "</span> + a);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">//a = 2</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>函数foo里面新创建的变量a处于foo的作用域里，所以不影响外界的a变量</p><h3 id="用let，const创建块作用域"><a href="#用let，const创建块作用域" class="headerlink" title="用let，const创建块作用域"></a>用<code>let</code>，<code>const</code>创建块作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> bar = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar) <span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是作用域？&quot;&gt;&lt;a href=&quot;#什么是作用域？&quot; class=&quot;headerlink&quot; title=&quot;什么是作用域？&quot;&gt;&lt;/a&gt;什么是作用域？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;作用域就是一套规则，用于确定在何处及如何查找变量（标识符）。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>修改npm源</title>
    <link href="http://yoursite.com/2019/10/09/%E4%BF%AE%E6%94%B9npm%E6%BA%90/"/>
    <id>http://yoursite.com/2019/10/09/修改npm源/</id>
    <published>2019-10-09T02:21:08.000Z</published>
    <updated>2020-06-06T04:57:47.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改npm源为淘宝源"><a href="#修改npm源为淘宝源" class="headerlink" title="修改npm源为淘宝源"></a>修改npm源为淘宝源</h2><p><code>npm config set registry http://registry.npm.taobao.org/</code></p><h2 id="查看当前源地址"><a href="#查看当前源地址" class="headerlink" title="查看当前源地址"></a>查看当前源地址</h2><p><code>npm config get registry</code></p><h2 id="重置为官方源"><a href="#重置为官方源" class="headerlink" title="重置为官方源"></a>重置为官方源</h2><p><code>npm config set registry https://registry.npmjs.org/</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改npm源为淘宝源&quot;&gt;&lt;a href=&quot;#修改npm源为淘宝源&quot; class=&quot;headerlink&quot; title=&quot;修改npm源为淘宝源&quot;&gt;&lt;/a&gt;修改npm源为淘宝源&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm config set registry http://r
      
    
    </summary>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>ES6的剩余运算符“...”</title>
    <link href="http://yoursite.com/2019/09/26/ES6%E7%9A%84%E5%89%A9%E4%BD%99%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/09/26/ES6的剩余运算符/</id>
    <published>2019-09-26T12:07:42.000Z</published>
    <updated>2020-06-06T07:40:26.357Z</updated>
    
    <content type="html"><![CDATA[<p><code>...</code>语法一般用于三种情况：</p><ol><li>​    对于不确定参数数量的函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...num</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num.reduce(<span class="function">(<span class="params">cur, next</span>) =&gt;</span> cur + next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">//expected output: 6</span></span><br></pre></td></tr></table></figure><ol start="2"><li>快速创建数组, <code>...</code>运算符可以将任意可枚举的对象转换为数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...arguments];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(example(a,b,c));</span><br><span class="line"><span class="comment">//expected output: ['a','b','c']</span></span><br><span class="line"><span class="comment">//对string也适用</span></span><br><span class="line"><span class="built_in">console</span>.log([...<span class="string">'hello'</span>]);</span><br><span class="line"><span class="comment">//expected output: ['h','e','l','l','o'];</span></span><br></pre></td></tr></table></figure><ol start="3"><li>合并数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> all = [<span class="number">1</span>, ...[<span class="number">2</span>,<span class="number">3</span>], <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(all);</span><br><span class="line"><span class="comment">//expected output: [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>所以，我对<code>...</code>运算符粗浅的看做未知数量的可迭代对象。</p><p>示例：这个代码是根据传入的字符串返回它的摩斯密码形式</p><p>使用<code>...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueMorseRepresentations = <span class="function"><span class="keyword">function</span> (<span class="params">words</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> mosmap = [<span class="string">".-"</span>, <span class="string">"-..."</span>, <span class="string">"-.-."</span>, <span class="string">"-.."</span>, <span class="string">"."</span>, <span class="string">"..-."</span>, <span class="string">"--."</span>, <span class="string">"...."</span>, <span class="string">".."</span>, <span class="string">".---"</span>, <span class="string">"-.-"</span>, <span class="string">".-.."</span>, <span class="string">"--"</span>, <span class="string">"-."</span>, <span class="string">"---"</span>, <span class="string">".--."</span>, <span class="string">"--.-"</span>, <span class="string">".-."</span>, <span class="string">"..."</span>, <span class="string">"-"</span>, <span class="string">"..-"</span>, <span class="string">"...-"</span>, <span class="string">".--"</span>, <span class="string">"-..-"</span>, <span class="string">"-.--"</span>, <span class="string">"--.."</span>]</span><br><span class="line">            <span class="keyword">var</span> str = words.map(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> s = <span class="string">''</span></span><br><span class="line">                res.split(<span class="string">''</span>).map(<span class="function"><span class="params">r</span> =&gt;</span> &#123;s += mosmap[r.charCodeAt() - <span class="number">97</span>]&#125;)</span><br><span class="line">                <span class="keyword">return</span> s</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> [...new <span class="built_in">Set</span>(str)].length  <span class="comment">//就是这里看不懂</span></span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>未使用<code>...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> uniqueMorseRepresentations = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> morseCode = [<span class="string">".-"</span>,<span class="string">"-..."</span>,<span class="string">"-.-."</span>,<span class="string">"-.."</span>,<span class="string">"."</span>,<span class="string">"..-."</span>,<span class="string">"--."</span>,<span class="string">"...."</span>,<span class="string">".."</span>,<span class="string">".---"</span>,<span class="string">"-.-"</span>,<span class="string">".-.."</span>,<span class="string">"--"</span>,<span class="string">"-."</span>,<span class="string">"---"</span>,<span class="string">".--."</span>,<span class="string">"--.-"</span>,<span class="string">".-."</span>,<span class="string">"..."</span>,<span class="string">"-"</span>,<span class="string">"..-"</span>,<span class="string">"...-"</span>,<span class="string">".--"</span>,<span class="string">"-..-"</span>,<span class="string">"-.--"</span>,<span class="string">"--.."</span>];</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> morse = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; words.length; i++) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; words[i].length; j++)</span><br><span class="line">        &#123;</span><br><span class="line">           morse += morseCode[words[i].charCodeAt(j) - <span class="number">97</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">console</span>.log(morse);</span><br><span class="line">      <span class="keyword">if</span>(!map[morse])</span><br><span class="line">      &#123;</span><br><span class="line">        map[morse] = <span class="number">1</span>;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      morse = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;...&lt;/code&gt;语法一般用于三种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;​    对于不确定参数数量的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>紫书第二章习题</title>
    <link href="http://yoursite.com/2019/09/05/%E7%B4%AB%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%B9%A0%E9%A2%98/"/>
    <id>http://yoursite.com/2019/09/05/紫书第二章习题/</id>
    <published>2019-09-05T15:14:17.000Z</published>
    <updated>2020-06-06T04:23:58.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="习题2-1-水仙花数（daffodil）"><a href="#习题2-1-水仙花数（daffodil）" class="headerlink" title="习题2-1　水仙花数（daffodil）"></a>习题2-1　水仙花数（daffodil）</h2><p>输出100～999中的所有水仙花数。若3位数ABC满足ABC＝A3＋B3＋C3，则称其为水仙花 数。例如153＝13＋53＋33，所以153是水仙花数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">111</span>; i &lt;= <span class="number">999</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> a = i / <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> b = i /<span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> c = i % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> s = a*a*a + b*b*b + c*c*c;</span><br><span class="line">    <span class="keyword">if</span>(s == i) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-2-韩信点兵（hanxin）"><a href="#习题2-2-韩信点兵（hanxin）" class="headerlink" title="习题2-2　韩信点兵（hanxin）"></a>习题2-2　韩信点兵（hanxin）</h2><p>相传韩信才智过人，从不直接清点自己军队的人数，只要让士兵先后以三人一排、五人 一排、七人一排地变换队形，而他每次只掠一眼队伍的排尾就知道总人数了。输入包含多组 数据，每组数据包含3个非负整数a，b，c，表示每种队形排尾的人数（a＜3，b＜5，c＜ 7），输出总人数的最小值（或报告无解）。已知总人数不小于10，不超过100。输入到文件 结束为止。<br>样例输入：<br>2 1 6<br>2 1 3<br>样例输出：<br>Case 1: 41<br>Case 2: No answer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"data.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">int</span> i,a, b, c;</span><br><span class="line">  <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a,&amp;b,&amp;c) != EOF)</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="comment">// printf("a = %d b = %d c = %d", a, b, c);</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">10</span>; i&lt;=<span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(i % <span class="number">3</span> == a &amp;&amp; i % <span class="number">5</span> == b &amp;&amp; i % <span class="number">7</span> == c)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(kase) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, ++kase,i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= <span class="number">101</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span>(kase) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: No answer\n"</span>, ++kase);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-3-倒三角形（triangle）"><a href="#习题2-3-倒三角形（triangle）" class="headerlink" title="习题2-3　倒三角形（triangle）"></a>习题2-3　倒三角形（triangle）</h2><p>输入正整数n≤20，输出一个n层的倒三角形。例如，n＝5时输出如下：</p><p>#########</p><p> #######  </p><p>   #####</p><p>​    ###</p><p>​     #</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,tag = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> kase = <span class="number">2</span>*(i<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tag; j++) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印空格高级一点的写法</span></span><br><span class="line">   <span class="comment">/* for(int k = 0; k &lt; n-i; k++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      printf(" ");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">while</span>(kase)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line">      kase--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    tag++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-4-子序列的和（subsequence）"><a href="#习题2-4-子序列的和（subsequence）" class="headerlink" title="习题2-4　子序列的和（subsequence）"></a>习题2-4　子序列的和（subsequence）</h2><p>输入两个正整数n＜m＜106，输出 ，保留5位小数。输入包含多组数据， 结束标记为n＝m＝0。提示：本题有陷阱。<br>样例输入：<br>2 4<br>65536 655360<br>0 0<br>样例输出：<br>Case 1: 0.42361<br>Case 2: 0.00001</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">int</span>  k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> n, m;</span><br><span class="line">  <span class="keyword">double</span>  s;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m) != EOF &amp;&amp; n &amp;&amp; m)</span><br><span class="line">  &#123;</span><br><span class="line">    s = <span class="number">0</span>; <span class="comment">//s要清零</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &lt;= m; i++) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//s += (1.0/(i*i)); //乘法溢出</span></span><br><span class="line">      s += (<span class="number">1.0</span>/i/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case %d: %.5f\n"</span>,++k,s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-5-分数化小数（decimal）"><a href="#习题2-5-分数化小数（decimal）" class="headerlink" title="习题2-5　分数化小数（decimal）"></a>习题2-5　分数化小数（decimal）</h2><p>输入正整数a，b，c，输出a/b的小数形式，精确到小数点后c位。a，b≤106，c≤100。输 入包含多组数据，结束标记为a＝b＝c＝0。<br>样例输入：<br>1 6 4<br>0 0 0<br>样例输出：<br>Case 1: 0.1667</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *fin, *fout;</span><br><span class="line">  fin = fopen(<span class="string">"data.in"</span>,<span class="string">"rb"</span>);</span><br><span class="line">  fout = fopen(<span class="string">"data.out"</span>,<span class="string">"wb"</span>);</span><br><span class="line">  <span class="keyword">int</span> a, b, c, kase = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fin,<span class="string">"%d %d %d"</span>,&amp;a, &amp;b, &amp;c) != EOF &amp;&amp; a &amp;&amp; b &amp;&amp; c)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">double</span> d = (<span class="keyword">double</span>)a/b;</span><br><span class="line">    <span class="keyword">if</span>(kase) <span class="built_in">fprintf</span>(fout,<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fout,<span class="string">"Case %d: %.*lf\n"</span>, ++kase, c, d);</span><br><span class="line">    <span class="comment">//用%.*lf控制输出长度，小数点后面的*表示输出位数，具体数字来自参数表</span></span><br><span class="line">  &#125;</span><br><span class="line">  fclose(fin);</span><br><span class="line">  fclose(fout);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="习题2-6-排列（permutation）"><a href="#习题2-6-排列（permutation）" class="headerlink" title="习题2-6　排列（permutation）"></a>习题2-6　排列（permutation）</h2><p>用1，2，3，…，9组成3个三位数<code>abc</code>，<code>def</code>和<code>ghi</code>，每个数字恰好使用一次，要 求<code>abc：def：ghi＝1：2：3</code>。按照<code>“abc def ghi”</code>的格式输出所有解，每行一个解。提示：不必 太动脑筋。</p><blockquote><p>没有思路</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;习题2-1-水仙花数（daffodil）&quot;&gt;&lt;a href=&quot;#习题2-1-水仙花数（daffodil）&quot; class=&quot;headerlink&quot; title=&quot;习题2-1　水仙花数（daffodil）&quot;&gt;&lt;/a&gt;习题2-1　水仙花数（daffodil）&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法比赛中的输入输出框架</title>
    <link href="http://yoursite.com/2019/09/04/%E7%AE%97%E6%B3%95%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/09/04/算法比赛中的输入输出框架/</id>
    <published>2019-09-04T10:02:49.000Z</published>
    <updated>2020-06-06T07:38:39.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法比赛中的输入输出框架"><a href="#算法比赛中的输入输出框架" class="headerlink" title="算法比赛中的输入输出框架"></a>算法比赛中的输入输出框架</h1><h3 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h3><p>标准输入输出就是控制台输入输出，在c语言中使用<code>scanf()</code> 和<code>printf()</code> 两个函数即可实现；</p><h3 id="文件重定向输入输出"><a href="#文件重定向输入输出" class="headerlink" title="文件重定向输入输出"></a>文件重定向输入输出</h3><p>文件的重定向需要用到函数<code>freopen()</code> , 在<code>mian</code> 函数的入口处使用该函数即可，一般的写法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"data.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 程序最后的输入输出分别在data.in 和data.out 两个文件里</span></span><br></pre></td></tr></table></figure><p>搭配使用<code>#define LOCAL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCAL</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  freopen(<span class="string">"data.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法的效果是，当源文件开头没有写<code>#define LOCAL</code> 这一句的时候，<code>#ifdef</code>和<code>#endif</code> 之间的代码将不被编译，所以使得重定向的方法可以在本地测试时使用</p><h3 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h3><p>文件输入输出涉及到<code>FILE*</code> 的使用，但是我们并不用关系为什么，可以直接使用，一般的写法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 100000000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *fin, *fout;    </span><br><span class="line">  fin = fopen(<span class="string">"data.in"</span>,<span class="string">"rb"</span>); <span class="comment">//打开文件</span></span><br><span class="line">  fout = fopen(<span class="string">"data.out"</span>,<span class="string">"wb"</span>); <span class="comment">//打开文件</span></span><br><span class="line">  <span class="keyword">int</span> x, n = <span class="number">0</span>, min = INF, max = -INF, s = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">fscanf</span>(fin, <span class="string">"%d"</span>, &amp;x) == <span class="number">1</span>) <span class="comment">//这里的scanf变成了fscanf，并且多了一个参数fin</span></span><br><span class="line">  &#123;</span><br><span class="line">    s += x;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; min) min = x;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; max) max = x;</span><br><span class="line">    n++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">fprintf</span>(fout,<span class="string">"%d %d %.3f\n"</span>, min, max, (<span class="keyword">double</span>)s/n);</span><br><span class="line">    <span class="comment">//这里的printf变成了fprintf，并且多了一个参数fout</span></span><br><span class="line">  fclose(fin); <span class="comment">//关闭文件</span></span><br><span class="line">  fclose(fout);<span class="comment">//关闭文件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件输入输出很容易切换成标准输入输出，只需要将 <code>fin = stdin；fout = out；</code>即可，不要调用<code>fopen()</code>和<code>fclose()</code></p><p>注意：如果使用<code>fopen(&quot;con&quot;,&quot;r&quot;)</code>的方式打开标准输入输出，这种方法并不是可移植的—在Linux下无效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法比赛中的输入输出框架&quot;&gt;&lt;a href=&quot;#算法比赛中的输入输出框架&quot; class=&quot;headerlink&quot; title=&quot;算法比赛中的输入输出框架&quot;&gt;&lt;/a&gt;算法比赛中的输入输出框架&lt;/h1&gt;&lt;h3 id=&quot;标准输入输出&quot;&gt;&lt;a href=&quot;#标准输入输出&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>关于前端学习的一些总结</title>
    <link href="http://yoursite.com/2019/06/02/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/02/关于自己前端学习的一些总结/</id>
    <published>2019-06-02T10:42:40.000Z</published>
    <updated>2020-06-06T04:56:22.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于前端学习的一些总结"><a href="#关于前端学习的一些总结" class="headerlink" title="关于前端学习的一些总结"></a>关于前端学习的一些总结</h2><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>现在是一名大二下的学生，从这学期开始，就定了入前端门的目标，到现在为止自己已经零零碎碎学了些前端的知识，在<a href="https://www.zhihu.com/" target="_blank" rel="noopener">知乎</a> 上看到一个回答 <a href="https://www.zhihu.com/question/32314049" target="_blank" rel="noopener">Web前端怎样入门？</a>推荐百度前端学院的课程，就屁颠屁颠跑来了，可是今年迟迟没有开课，等得我那是一个焦急啊，现在终于等到开课了，想要重新制定一个计划，不仅是总结之前自己零散学到的知识，也希望通过这个平台能够有一个更好的开始。</p><h3 id="接下来我想怎么继续学习"><a href="#接下来我想怎么继续学习" class="headerlink" title="接下来我想怎么继续学习"></a>接下来我想怎么继续学习</h3><ul><li><p>在百度前端学院学习，只是一个契机，在学习过程中应该要扩充很多其他的知识，在<a href="https://github.com" target="_blank" rel="noopener">github</a>上star了一个项目（<a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">developer-roadmap</a>），我觉得非常好，也尝试按照这上面的各个阶段来学习，但是之前没有认真对待，所以现在想要做出一些改变，就从这里开始。</p></li><li><p>学到一个知识点的时候，就要动起手来，打代码，写个demo之类的，并且认真写笔记，我之前也通过<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a>搭了一个<a href="https://moillz.github.io/" target="_blank" rel="noopener">个人博客</a>，记录自己的一些笔记，但是我以前是个懒鬼（我也想改变），就写了几篇笔记。现在觉得每天要应该把自己学到的东西进行总结，有时候往往自己觉得懂了，但是可能只是看懂了，并不能运用，而通过写博客相当于把这些东西讲给别人听，这也是对自己的一个小测试</p></li><li><p>在学习过程中摆脱 “学生气”，不要等什么都弄懂了才开始写代码，学习是一个并不轻松的过程，如果自己太舒服了，那可能真的没在学习，多练习才是真理，代码要多打才能提升。</p></li><li><p>之前数据结构与算法没有学好，所以会把这个给补回来，并且尝试在LeetCode上刷题，一天一道吧现在，为了提高自己做题的兴趣，我是开始从通过率高的题做起（不想一来就把自己难的喘不过气），兴趣和坚持下去才是最重要的。</p></li><li><p>多看优秀代码，有时候多思考别人为什么这样写，可能会有意外收获，遇到问题多尝试自己解决。</p></li><li><p>在我的学习过程中，一直都没做过什么能称得上是个项目的东西，所以我打算自己从个小demo做起，尝试自己从零开始搭个网站，从后端到前端，然后慢慢往里头加东西，希望自己能坚持下来。</p></li><li><p>作为一个CS专业的学生，基础还是非常重要的，我马上要步入大三了，时间越来越紧，也还有很多课程还没学，比如操作系统，编译原理，计算机网络等，所以得加油才是。</p></li></ul><h3 id="关于我看过的一些书籍"><a href="#关于我看过的一些书籍" class="headerlink" title="关于我看过的一些书籍"></a>关于我看过的一些书籍</h3><ul><li><p>深入理解计算机系统（CS:APP）：对应了计算机组成原理这门课程，非常好的书，但是我还没看完，这是一本需要慢慢领悟的书</p></li><li><p>javascript高级程序设计：我学习js看的书，还没看完，以前真是的什么都想学，啥也学不好</p></li><li><p>算法（第四版）：我用来学数据结构与算法的，Coursera上有配套的视频，简直不能再好了，可是我（就是个弟弟）</p></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>新的开始，新的气象，既然要做些改变，那就要行动起来，每天坚持写笔记，把自己从生活的舒适区拉出来，进入学习的状态。</p><p>学习过程中的方法可能会变化，但是我会定期检验自己是不是有提高，希望自己能坚持下来</p><p>希望我能在这个平台结识一些一起学习的小伙伴</p><p>语言组织能力不是很好，我会多写笔记提升自己的</p><p>最后，谢谢各位看到我笔记的同学，能够强忍我这粗糙的语言把这个看完</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于前端学习的一些总结&quot;&gt;&lt;a href=&quot;#关于前端学习的一些总结&quot; class=&quot;headerlink&quot; title=&quot;关于前端学习的一些总结&quot;&gt;&lt;/a&gt;关于前端学习的一些总结&lt;/h2&gt;&lt;h3 id=&quot;心路历程&quot;&gt;&lt;a href=&quot;#心路历程&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="front end" scheme="http://yoursite.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>JS---基本类型和引用类型的值</title>
    <link href="http://yoursite.com/2019/04/22/JS-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC/"/>
    <id>http://yoursite.com/2019/04/22/JS-基本类型和引用类型的值/</id>
    <published>2019-04-22T09:26:14.000Z</published>
    <updated>2020-06-06T04:33:16.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h1><p>ECMAScript变量可能有两种数据类型的值，基本类型值和引用类型值，<strong>基本类型值</strong> 指的是简单的数据段，而<strong>引用类型值</strong>指的是那些可能有多个值构成的对象。</p><p>基本数据类型的值都按值访问的，我们可以直接对保存在变量中的值进行操作。而引用类型的值是保存在内存中的对象，JavaScript不允许我们直接对内存进行操作，操作对象的值实际上是通过对象的引用做到的，所以，引用类型的值是按引用访问的。</p><p>这种说法不严密，当复制保存着对象的某个变量时，操作的是对象的引用。但在为对象添加属性时，操作的实际上是对象。</p><blockquote><p>JavaScript中的字符串不是引用类型</p></blockquote><h4 id="动态的属性"><a href="#动态的属性" class="headerlink" title="动态的属性"></a>动态的属性</h4><blockquote><p>对象的实例可以动态添加属性，而基本类型值不能改变。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">book.name = <span class="string">"JavaScript高级程序设计语言"</span>;   <span class="comment">//为对象book动态添加属性</span></span><br><span class="line">alert(book.name);     <span class="comment">//调用book的name属性</span></span><br></pre></td></tr></table></figure><p>而对于基本数据类型则不可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"hello"</span>;</span><br><span class="line">name.age = <span class="number">23</span>;</span><br><span class="line">alert(name.age) <span class="comment">//undefine</span></span><br></pre></td></tr></table></figure><h4 id="复制变量值"><a href="#复制变量值" class="headerlink" title="复制变量值"></a>复制变量值</h4><p>不仅两种类型值得存储方式不一样，在对基本类型值和引用类型值进行复制操作的时候，也存在不同</p><p>对基本类型值复制，将会创建一个相同类型的变量，然后在将原变量的值复制给新变量，这时，新变量和原变量两者相互独立。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = num1;</span><br></pre></td></tr></table></figure><blockquote><p>此后，两个变量相互独立，对其中一个变量的操作不会影响另一变量</p></blockquote><p>对引用类型值得复制，同样也会将存储在变量对象中的值复制一份放到 为新变量分配的空间中。不同的是，这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一 个对象。复制操作结束后，两个变量实际上将引用同一个对象。因此，改变其中一个变量，就会影响另 一个变量，如下面的例子所示： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"Nicholas"</span>;</span><br><span class="line">alert(obj2.name);  <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure><blockquote><p>由于是引用类型值，所以两者相互关联</p></blockquote><p><img src="E:\笔记\图片\引用类型值的复制.png" alt></p><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p>ECMAScript 中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参 数，就和把值从一个变量复制到另一个变量一样。<strong>基本类型值的传递如同基本类型变量的复制一样，而 引用类型值的传递，则如同引用类型变量的复制一样。</strong></p><blockquote><p>在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者用 ECMAScript的概念来说，就是<code>arguments</code>中的一个元素），比如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    num += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">addTen(num);</span><br><span class="line">alert(num);    <span class="comment">// 20</span></span><br><span class="line">alert(addTen(num))       <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><blockquote><p>在向参数传递引用类型的值时，会把 这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。比如 ：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    obj.name = <span class="string">"Xiaohua"</span>;</span><br><span class="line">    obj = <span class="keyword">new</span> <span class="built_in">Object</span>();      <span class="comment">//将局部变量obj重新定义了一个对象</span></span><br><span class="line">    obj.name = <span class="string">"Xiaoming"</span>;   <span class="comment">//并将name属性改为"Xiaoming"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setName(person);</span><br><span class="line">alert(person.name);     <span class="comment">//Xiaohua</span></span><br></pre></td></tr></table></figure><p>这里的结果充分反映了，函数参数的传递为值传递，如果这里是引用传递的话，<code>person</code>的<code>name</code>属性应该为<code>Xiaoming</code></p><h4 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h4><p>通常用来检测引用类型的值，比如，我们想知道这是什么类型的对象</p><p>操作符<code>instanceof</code> ,比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);   <span class="comment">//变量person是Object吗？</span></span><br><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Array</span>);    <span class="comment">//变量person是Array吗？</span></span><br></pre></td></tr></table></figure><blockquote><p>如果变量的给定的应用类型的实例，则返回true</p></blockquote><blockquote><p>根据规定，所有的引用类型都是Object的实例</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本类型和引用类型的值&quot;&gt;&lt;a href=&quot;#基本类型和引用类型的值&quot; class=&quot;headerlink&quot; title=&quot;基本类型和引用类型的值&quot;&gt;&lt;/a&gt;基本类型和引用类型的值&lt;/h1&gt;&lt;p&gt;ECMAScript变量可能有两种数据类型的值，基本类型值和引用类型
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript---语句</title>
    <link href="http://yoursite.com/2019/04/22/JavaScript-%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2019/04/22/JavaScript-语句/</id>
    <published>2019-04-22T09:00:05.000Z</published>
    <updated>2020-06-06T09:19:32.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><ul><li>第一种用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( i &gt; <span class="number">25</span> ) &#123;</span><br><span class="line">    alert(<span class="string">"Greater than 25."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Less than or equal to 25."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">25</span>) &#123;</span><br><span class="line">    alert(<span class="string">"Greater than 25."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    alert(<span class="string">"Less than 0."</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Between 0 and 25, inclusive."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while语句"><a href="#do-while语句" class="headerlink" title="do-while语句"></a>do-while语句</h4><blockquote><p>后测试语句，循环体的语句至少被执行一次</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">2</span>);     <span class="comment">//此时代码块只能被执行一次，也是至少执行的一次，碰到判断条件停止循环</span></span><br></pre></td></tr></table></figure><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><blockquote><p>先判断再执行，代码块的语句有可能永远不能执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;                    <span class="comment">//先判断是否符合条件，再执行</span></span><br></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><blockquote><p>前测试循环语句</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialzation; expression; post-loop-expression) </span><br><span class="line">&#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    j += <span class="number">1</span>;</span><br><span class="line">&#125;                   <span class="comment">//初始化i等于0，判断i小于n,执行代码快里的语句，再执行i++语句，后面依次循环</span></span><br></pre></td></tr></table></figure><h4 id="for-in语句"><a href="#for-in语句" class="headerlink" title="for-in语句"></a>for-in语句</h4><blockquote><p>一种精准的迭代语句，可以用来枚举对象的属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( property <span class="keyword">in</span> expression) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">in</span> Window) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break、continue、label语句"><a href="#break、continue、label语句" class="headerlink" title="break、continue、label语句"></a>break、continue、label语句</h4><blockquote><p>label 语句可以和break，continue在多重循环中搭配使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label: statement;      <span class="comment">//label语句的格式</span></span><br></pre></td></tr></table></figure><blockquote><p>break语句用来完全跳出循环，continue语句用来跳出大循环中的一次循环并开始下一次循环</p></blockquote><p>示例：break</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) <span class="keyword">break</span>;   <span class="comment">//number=55时，退出内层循环，所以少循环了5次</span></span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;           <span class="comment">//number最后的值为95</span></span><br></pre></td></tr></table></figure><p>示例: continue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j =<span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) <span class="keyword">continue</span>; <span class="comment">//number = 55时，跳过一次内层循环，最后少循环了一次</span></span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//number最后的值为99</span></span><br></pre></td></tr></table></figure><p>示例：break label   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">start:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span> start;</span><br><span class="line">        &#125;  </span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环跳到start标签处，所以number最后的值为55</p></blockquote><p>示例：continue label</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">start:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span> start;</span><br><span class="line">        &#125;  </span><br><span class="line">        number++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;        <span class="comment">//number = 95</span></span><br></pre></td></tr></table></figure><blockquote><p>循环跳到<code>label</code>标签处，即就是当满足<code>continue</code>条件时，start标签处的外层循环跳过一次，直接从<code>i= 5，j= 5</code>处进入<code>i = 6，j= 0</code>处，所以<code>number</code>的值最后为<code>95</code></p></blockquote><h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><blockquote><p>with语句的作用是将代码的作用域设置到一个特定的对象中去</p><p>with语句可以简化代码，但是同时也会造成性能下降，严格模式下禁用</p></blockquote><p>示例：未使用with语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">var</span> url = location.href;</span><br></pre></td></tr></table></figure><p>示例：使用with语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line">    <span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> hostName = hostname;</span><br><span class="line">    <span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><blockquote><p>一个表达式，而需要对表达式的多个值进行不同的处理方式时使用</p></blockquote><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value3: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: statement;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: alert(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: alert(<span class="string">"4"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以混合case情形，注意要删去break</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">//合并两种情形</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        alert(<span class="string">"4"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在 <code>switch</code> 语句中使用任何数据类型（在很多其他语言中只能使用数值），无论是字符串，还是对象都没有 问题。其次，每个 <code>case</code>的值不一定是常量，可以是变量，甚至是表达式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="string">"hello world"</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"hello"</span> +<span class="string">"world"</span>:</span><br><span class="line">        alert(<span class="string">"Greeting was found."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"goodbye"</span>:</span><br><span class="line">        alert(<span class="string">"Closing was found."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch表达式在与case匹配时，采用全等操作符，故不会发生类型转换，’10’不等于10</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;语句&quot;&gt;&lt;a href=&quot;#语句&quot; class=&quot;headerlink&quot; title=&quot;语句&quot;&gt;&lt;/a&gt;语句&lt;/h1&gt;&lt;h4 id=&quot;if语句&quot;&gt;&lt;a href=&quot;#if语句&quot; class=&quot;headerlink&quot; title=&quot;if语句&quot;&gt;&lt;/a&gt;if语句&lt;/h
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>操作符</title>
    <link href="http://yoursite.com/2019/04/20/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/04/20/操作符/</id>
    <published>2019-04-20T09:23:21.000Z</published>
    <updated>2020-06-06T07:39:26.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h4 id="相等操作符"><a href="#相等操作符" class="headerlink" title="相等操作符"></a>相等操作符</h4><ul><li>相等和不相等</li><li>全等和不全等</li></ul><blockquote><p>由于相等和不相等比较是存在类型转换问题，所以为了保证编程时代码中数据类型的完整性，尽量使用使用全等和不全等        </p></blockquote><h4 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h4><ul><li>variable  =  Boolean.expression ? true_value  :  false_value;</li></ul><h4 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a>赋值操作符</h4><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center">加/赋值</td><td style="text-align:center">+=</td></tr><tr><td style="text-align:center">减/赋值</td><td style="text-align:center">-=</td></tr><tr><td style="text-align:center">乘/赋值</td><td style="text-align:center">*=</td></tr><tr><td style="text-align:center">除/赋值</td><td style="text-align:center">/=</td></tr><tr><td style="text-align:center">模/赋值</td><td style="text-align:center">%=</td></tr><tr><td style="text-align:center">左移/赋值</td><td style="text-align:center">&lt;&lt;=</td></tr><tr><td style="text-align:center">有符号右移/赋值</td><td style="text-align:center">&gt;&gt;=</td></tr><tr><td style="text-align:center">无符号右移/赋值</td><td style="text-align:center">&gt;&gt;&gt;=</td></tr></tbody></table><blockquote><p>设计这些操作符的目的是为了简化赋值操作，并不会带来任何性能上的提升</p></blockquote><h4 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h4><ul><li>声明多个变量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>, num2 = <span class="number">2</span>, num3 = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li>赋值操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>);   <span class="comment">//num的值为最后一个数，num == 0；</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h1&gt;&lt;h4 id=&quot;相等操作符&quot;&gt;&lt;a href=&quot;#相等操作符&quot; class=&quot;headerlink&quot; title=&quot;相等操作符&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中String类型学习笔记</title>
    <link href="http://yoursite.com/2019/04/15/JS%E4%B8%ADString%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/15/JS中String类型学习笔记/</id>
    <published>2019-04-15T10:47:57.000Z</published>
    <updated>2020-06-06T09:19:42.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h1><p>1.’ ‘ 或者 “ “ 都可以表示一个字符串<br>2.字符字面量，就是转义字符  </p><table><thead><tr><th>字面量</th><th>含义</th></tr></thead><tbody><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\b</td><td>空格</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>进制</td></tr><tr><td>\\</td><td>斜杠</td></tr><tr><td>\‘</td><td>单引号，如 ‘ It \‘s mine ‘</td></tr><tr><td>\“</td><td>双引号， 如 “ He said,\“hi\“ “</td></tr><tr><td>\xnn</td><td>以十六进制(n为0~f)表示的字符，如’\x41’表示 ‘A’</td></tr><tr><td>\unnnn</td><td>以十六进制(n为0~f)表示Unicode字符，如’\x03a3’表示希腊字母Σ</td></tr></tbody></table><p>3.字符串的长度，length属性       </p><p>4.字符串不可变，一旦创建，不可修改，字符串的拼接也是重新定义了新的字符串再删除原来的字符串。       </p><p>5.用toString()方法和String()转换成字符串。  </p><ul><li>在不知道转换变量是“null”还是“undefined“时，用String()。如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value1 = <span class="number">10</span>;      </span><br><span class="line"><span class="keyword">var</span> value2 = <span class="literal">true</span>;    </span><br><span class="line"><span class="keyword">var</span> value3 =  <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> value4</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(value1);    <span class="comment">//"10"</span></span><br><span class="line"><span class="built_in">String</span>(value2);    <span class="comment">//"true"</span></span><br><span class="line"><span class="built_in">String</span>(value3);    <span class="comment">//"null"</span></span><br><span class="line"><span class="built_in">String</span>(value4);    <span class="comment">//"undefined"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;String-类型&quot;&gt;&lt;a href=&quot;#String-类型&quot; class=&quot;headerlink&quot; title=&quot;String 类型&quot;&gt;&lt;/a&gt;String 类型&lt;/h1&gt;&lt;p&gt;1.’ ‘ 或者 “ “ 都可以表示一个字符串&lt;br&gt;2.字符字面量，就是转义字符 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>用JavaScript实现动画效果</title>
    <link href="http://yoursite.com/2019/04/12/%E7%94%A8JavaScript%E5%AE%9E%E7%8E%B0%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2019/04/12/用JavaScript实现动画效果/</id>
    <published>2019-04-11T16:33:22.000Z</published>
    <updated>2020-06-06T07:40:02.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动画的基础知识"><a href="#动画的基础知识" class="headerlink" title="动画的基础知识"></a>动画的基础知识</h1><p>动画是样式随时间变化的的一个很好的例子，简单来说，动画就是元素的位置随时间的变化而发生变化的一种函数。     </p><ol><li><p>位置<br>设置元素在网页里的位置的任务一般是属于表示层的，也就是CSS的任务，例子如下：    </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">element</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也可以用js来设置：   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">element.style.top = <span class="string">"100px"</span>;</span><br><span class="line">element.style.left = <span class="string">"30px"</span>;</span><br></pre></td></tr></table></figure></li></ol><p>这就表示了该元素将被摆放在距离网页顶部100px处，距离网页左端30px处，position属性有四个可选择的值。  </p><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>position</td><td>static</td><td>position属性的默认值，元素的位置想会按照元素出现的先后顺序依次出现</td></tr><tr><td>position</td><td>fixed</td><td></td></tr><tr><td>position</td><td>relative</td><td>表现形式和static相似，区别是position属性值为relative还可以从文档的正常显示顺序里脱离出来</td></tr><tr><td>position</td><td>absolute</td><td>如果我某个元素的position值设为absolute，那么我们就可以把它放在容纳它的<strong>容器</strong>中的任意位置</td></tr></tbody></table><p><strong>容器</strong>：这里的容器也是一个元素，只不过需要一定的条件   </p><ul><li>该元素的position属性是fixed或absolute</li><li>改元素的父元素的position属性是fixed或absolute</li></ul><p>把文档里的元素放在特定的地方不需要花太大的功夫，我们假定就这样一个元素：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>Woo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>用js代码来设置这个元素的初始位置<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.getElementById(<span class="string">'message'</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</span><br><span class="line">    elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">    elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">    elem.style.left = <span class="string">"30px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在我们想让这个元素的位置随时间的变化而变化     </p><ol start="2"><li>时间   </li></ol><p>接下来会用到的函数：   </p><ul><li><p>setTimeout( “<em>function</em>“, interval );    </p><ul><li>第一个参数通常是一个字符串，其内容是要执行的函数的名字。   </li><li>第二个参数是一个数值，它以毫秒为单位设定了需要经过多长时间才执行第一个参数传给它的函数。   </li><li>该函数还有一个返回值，当我们想要结束取消一个还在等待执行的函数，就可以把这个函数的返回值赋值给一个变量，然后调用cleanTimeout( )函数。</li></ul></li><li><p>cleanTimeout( );  </p><ul><li>取消待执行函数的排队。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> movement = setTimeout( <span class="string">"positionMessage"</span>, <span class="number">5000</span> );    <span class="comment">//让函数positionMessage()5000毫秒后执行</span></span><br><span class="line">cleanTimeout( movment ); <span class="comment">//取消执行</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>时间递增量   </li></ol><p>我们需要对我们函数进行升级，即使使用了setTimeout( )函数，这个元素的行为依然不像动画，只不过是过了一段时间后突然跳到另一个位置</p><p>首先设定一个目标位置值，在positionMessage( )函数中递增top和left的值，直到达到目标值    </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageMove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line"><span class="keyword">var</span> ypos = parInt(elem.style.top);</span><br><span class="line"><span class="keyword">var</span> xpos = parInt(elem.style.left);</span><br><span class="line"><span class="keyword">if</span> (xpos == <span class="number">200</span> &amp;&amp; ypos == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (xpos &lt; <span class="number">200</span>) xpos++;</span><br><span class="line"><span class="keyword">if</span> (ypos &lt; <span class="number">200</span>) ypos++;</span><br><span class="line"><span class="keyword">if</span> (xpos &gt; <span class="number">200</span>) xpos--;</span><br><span class="line"><span class="keyword">if</span> (ypos &gt; <span class="number">200</span>) ypos--;</span><br><span class="line">elem.style.top = ypos + <span class="string">'px'</span>;</span><br><span class="line">elem.style.left = xpos + <span class="string">'px'</span>;</span><br><span class="line">movement = setTimeout(<span class="string">"positionMessage"</span>,<span class="number">10</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动画的基础知识&quot;&gt;&lt;a href=&quot;#动画的基础知识&quot; class=&quot;headerlink&quot; title=&quot;动画的基础知识&quot;&gt;&lt;/a&gt;动画的基础知识&lt;/h1&gt;&lt;p&gt;动画是样式随时间变化的的一个很好的例子，简单来说，动画就是元素的位置随时间的变化而发生变化的一种函数
      
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
